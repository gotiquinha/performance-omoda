import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard de Performance - Omoda",
    page_icon="üöó",
    layout="wide"
)

# Fun√ß√£o para formatar valores monet√°rios
def format_currency(value):
    if pd.isna(value):
        return "R$ 0,00"
    try:
        value = float(value)
        # Separa parte inteira e decimal
        integer_part = int(value)
        decimal_part = int(round((value - integer_part) * 100))
        
        # Formata parte inteira com pontos como separadores de milhar
        str_integer = str(integer_part)
        formatted_integer = ""
        for i in range(len(str_integer)-1, -1, -3):
            if i < 3:
                formatted_integer = str_integer[0:i+1] + formatted_integer
            else:
                formatted_integer = "." + str_integer[i-2:i+1] + formatted_integer
        
        # Remove ponto inicial se houver
        if formatted_integer.startswith("."):
            formatted_integer = formatted_integer[1:]
            
        return f"R$ {formatted_integer},{decimal_part:02d}"
    except:
        return "R$ 0,00"

# Fun√ß√£o para formatar percentuais
def format_percentage(value):
    if pd.isna(value):
        return "0,00%"
    try:
        value = float(str(value).replace('%', '').replace(',', '.'))
        integer_part = int(value)
        decimal_part = int((value - integer_part) * 100)
        return f"{integer_part},{decimal_part:02d}%"
    except:
        return "0,00%"

# Fun√ß√£o para formatar n√∫meros decimais
def format_decimal(value):
    if pd.isna(value):
        return "0,00"
    try:
        value = float(value)
        # Separa parte inteira e decimal
        integer_part = int(value)
        decimal_part = int(round((value - integer_part) * 100))
        
        # Formata parte inteira com pontos como separadores de milhar
        str_integer = str(integer_part)
        formatted_integer = ""
        for i in range(len(str_integer)-1, -1, -3):
            if i < 3:
                formatted_integer = str_integer[0:i+1] + formatted_integer
            else:
                formatted_integer = "." + str_integer[i-2:i+1] + formatted_integer
        
        # Remove ponto inicial se houver
        if formatted_integer.startswith("."):
            formatted_integer = formatted_integer[1:]
            
        return f"{formatted_integer},{decimal_part:02d}"
    except:
        return "0,00"

# Fun√ß√£o para formatar n√∫meros inteiros
def format_integer(value):
    if pd.isna(value):
        return "0"
    try:
        # Remove caracteres especiais e converte para inteiro
        clean_value = str(value).replace('\xa0', '').replace(' ', '').replace('.', '')
        num = int(clean_value)
        
        # Formata com pontos como separadores de milhar
        str_num = str(num)
        formatted = ""
        for i in range(len(str_num)-1, -1, -3):
            if i < 3:
                formatted = str_num[0:i+1] + formatted
            else:
                formatted = "." + str_num[i-2:i+1] + formatted
        
        # Remove ponto inicial se houver
        if formatted.startswith("."):
            formatted = formatted[1:]
            
        return formatted
    except:
        return "0"

# Fun√ß√£o para limpar strings num√©ricas
def clean_numeric_string(value):
    if pd.isna(value):
        return '0'
    # Remove R$, espa√ßos, caracteres especiais e troca v√≠rgula por ponto
    return str(value).replace('R$', '').replace('\xa0', '').replace(' ', '').replace('.', '').replace(',', '.')

# Fun√ß√£o para carregar e processar os dados
@st.cache_data
def load_data():
    # Carregar dados do Google Ads
    ads_data = pd.read_csv('Relat√≥rio da campanha.csv', skiprows=2)
    
    # Carregar dados de leads
    leads_recreio = pd.read_csv('leads-omoda-recreio.csv', sep=';')
    leads_curitiba = pd.read_csv('leads-omoda-curitiba.csv', sep=';')
    
    # Adicionar coluna de origem
    leads_recreio['origem'] = 'Recreio'
    leads_curitiba['origem'] = 'Curitiba'
    
    # Combinar dados de leads
    leads_data = pd.concat([leads_recreio, leads_curitiba], ignore_index=True)
    
    # Converter data
    leads_data['criado_em'] = pd.to_datetime(leads_data['criado_em'], format='%d/%m/%Y %H:%M:%S')
    
    # Remover dados de teste
    leads_data = leads_data[~leads_data['nome_cliente'].str.contains('teste', case=False, na=False)]
    leads_data = leads_data[~leads_data['email_cliente'].str.contains('teste', case=False, na=False)]
    
    # Tratar dados do relat√≥rio
    ads_data['Custo'] = ads_data['Custo'].apply(clean_numeric_string).astype(float)
    ads_data['Custo/conv.'] = ads_data['Custo/conv.'].apply(clean_numeric_string).astype(float)
    ads_data['Convers√µes'] = ads_data['Convers√µes'].apply(clean_numeric_string).astype(float)
    
    # Remover linhas sem nome de campanha ou com 'Total'
    ads_data = ads_data[
        ads_data['Campanha'].notna() & 
        (ads_data['Campanha'] != 'None') & 
        ~ads_data['Campanha'].str.contains('Total', na=False)
    ]
    
    return ads_data, leads_data

# Carregar dados
ads_data, leads_data = load_data()

# T√≠tulo do dashboard
st.title("üìä Dashboard de Performance - Omoda")

# Explica√ß√£o do dashboard
st.markdown("""
Este dashboard apresenta as principais m√©tricas de performance das campanhas de marketing digital da Omoda.
Os dados de campanhas s√£o provenientes do Google Ads.
Utilize os filtros e gr√°ficos interativos para analisar o desempenho das campanhas e tomar decis√µes baseadas em dados.
""")

# M√©tricas principais
st.subheader("üìà M√©tricas Principais")
st.markdown("""
Estas m√©tricas representam o desempenho geral das campanhas:
- **Total de Leads**: N√∫mero total de contatos qualificados gerados atrav√©s dos formul√°rios
- **Total Gasto em An√∫ncios (Google)**: Investimento total em campanhas do Google Ads
- **CPL M√©dio (Google)**: Custo por Lead no Google Ads (investimento necess√°rio para gerar cada lead)
""")

col1, col2, col3 = st.columns(3)

with col1:
    total_leads = len(leads_data)
    st.metric("Total de Leads Qualificados", 
             f"{total_leads:,}".replace(",", "."),
             help="N√∫mero total de leads que preencheram formul√°rios nos sites da Omoda e Jaecoo")

with col2:
    total_gasto = ads_data['Custo'].sum()
    st.metric("Total Gasto em An√∫ncios (Google)", format_currency(total_gasto))

with col3:
    cpl_medio = total_gasto / total_leads if total_leads > 0 else 0
    st.metric("CPL M√©dio (Google)", format_currency(cpl_medio))

# An√°lise de Modelos por Regi√£o
st.subheader("üöó Modelos Mais Procurados por Regi√£o")
st.markdown("""
Esta an√°lise mostra a distribui√ß√£o de interesse entre os modelos Omoda e Jaecoo em cada regi√£o:
""")

# Fun√ß√£o para identificar o modelo espec√≠fico
def get_modelo_from_versao(versao):
    if pd.isna(versao):
        return "N√£o especificado"
    versao = versao.lower()
    if 'omoda e5' in versao or 'omoda' in versao:
        return 'Omoda E5'
    elif 'jaecoo j7' in versao or 'jaecoo' in versao:
        return 'Jaecoo J7'
    return "N√£o especificado"

leads_data['modelo_principal'] = leads_data['versao'].apply(get_modelo_from_versao)

# Criar gr√°fico de modelos por regi√£o
modelos_regiao = leads_data.groupby(['origem', 'modelo_principal']).size().reset_index(name='quantidade')
modelos_regiao = modelos_regiao[modelos_regiao['modelo_principal'] != "N√£o especificado"]

fig_modelos = px.bar(
    modelos_regiao,
    x='origem',
    y='quantidade',
    color='modelo_principal',
    title='Interesse por Modelo em Cada Regi√£o',
    labels={
        'origem': 'Regi√£o',
        'quantidade': 'N√∫mero de Leads',
        'modelo_principal': 'Modelo do Ve√≠culo'
    },
    barmode='group',
    color_discrete_map={
        'Omoda E5': '#1f77b4',
        'Jaecoo J7': '#ff7f0e'
    }
)

fig_modelos.update_layout(
    xaxis_title="Regi√£o",
    yaxis_title="N√∫mero de Leads",
    legend_title="Modelo do Ve√≠culo"
)

st.plotly_chart(fig_modelos, use_container_width=True)

# Gr√°fico de leads por dia
st.subheader("üìä Evolu√ß√£o Di√°ria de Leads")
st.markdown("""
Este gr√°fico mostra a evolu√ß√£o do n√∫mero de leads ao longo do tempo, permitindo identificar:
- Tend√™ncias de crescimento ou queda
- Picos de performance
- Sazonalidade na gera√ß√£o de leads
""")

# Agrupar leads por dia
leads_por_dia = leads_data.groupby(leads_data['criado_em'].dt.date).size().reset_index(name='leads')

# Criar gr√°fico
fig = go.Figure()
fig.add_trace(go.Scatter(
    x=leads_por_dia['criado_em'],
    y=leads_por_dia['leads'],
    name='Leads',
    line=dict(color='#1f77b4')
))

fig.update_layout(
    title='Evolu√ß√£o Di√°ria de Leads',
    xaxis_title='Data',
    yaxis_title='Quantidade de Leads',
    hovermode='x unified'
)

st.plotly_chart(fig, use_container_width=True)

# Ranking das campanhas
st.subheader("üèÜ Ranking de Campanhas por Custo-Benef√≠cio")
st.markdown("""
Este ranking mostra o custo por convers√£o de cada campanha no Google Ads, permitindo identificar:
- Campanhas mais eficientes (menor custo por convers√£o)
- Oportunidades de otimiza√ß√£o
- Distribui√ß√£o do investimento entre campanhas do Google
""")

# Calcular m√©tricas por campanha
campanhas_metrics = ads_data[ads_data['Campanha'].str.contains('Total', na=False) == False].copy()
campanhas_metrics['Custo/Convers√£o'] = campanhas_metrics['Custo/conv.']
campanhas_metrics = campanhas_metrics.sort_values('Custo/Convers√£o')

# Criar gr√°fico de barras
fig_campanhas = px.bar(
    campanhas_metrics,
    x='Campanha',
    y='Custo/Convers√£o',
    title='Custo por Convers√£o por Campanha (Google)',
    labels={'Custo/Convers√£o': 'Custo por Convers√£o (R$)', 'Campanha': 'Campanha do Google Ads'}
)

fig_campanhas.update_layout(
    xaxis_tickangle=-45,
    showlegend=False
)

st.plotly_chart(fig_campanhas, use_container_width=True)

# Tabela interativa
st.subheader("üìã Dados Detalhados por Campanha (Google)")
st.markdown("""
Esta tabela apresenta os dados detalhados das campanhas do Google Ads:
- **Impress√µes**: N√∫mero de vezes que o an√∫ncio foi exibido no Google
- **Intera√ß√µes**: N√∫mero de cliques ou engajamentos com os an√∫ncios
- **Taxa de intera√ß√£o**: Percentual de pessoas que interagiram com o an√∫ncio
- **Custo**: Investimento total na campanha do Google Ads
- **Convers√µes**: N√∫mero de leads gerados atrav√©s dos an√∫ncios
- **Custo/conv.**: Custo por convers√£o (investimento por lead)

*Fonte: Relat√≥rio de Campanhas do Google Ads*
""")

# Filtros
col1, col2 = st.columns(2)

with col1:
    campanha_selecionada = st.selectbox(
        "Selecione a Campanha",
        ['Todas'] + list(ads_data['Campanha'].unique())
    )

with col2:
    data_inicio = st.date_input(
        "Data Inicial",
        value=leads_data['criado_em'].min().date()
    )
    data_fim = st.date_input(
        "Data Final",
        value=leads_data['criado_em'].max().date()
    )

# Filtrar dados
if campanha_selecionada != 'Todas':
    dados_filtrados = ads_data[ads_data['Campanha'] == campanha_selecionada]
else:
    dados_filtrados = ads_data

# Exibir tabela
dados_formatados = dados_filtrados.copy()
dados_formatados['Impress√µes'] = dados_formatados['Impress√µes'].apply(format_integer)
dados_formatados['Intera√ß√µes'] = dados_formatados['Intera√ß√µes'].apply(format_integer)
dados_formatados['Taxa de intera√ß√£o'] = dados_formatados['Taxa de intera√ß√£o'].apply(format_percentage)
dados_formatados['Custo'] = dados_formatados['Custo'].apply(format_currency)
dados_formatados['Convers√µes'] = dados_formatados['Convers√µes'].apply(format_decimal)
dados_formatados['Custo/conv.'] = dados_formatados['Custo/conv.'].apply(format_currency)

st.dataframe(
    dados_formatados[[
        'Campanha',
        'Impress√µes',
        'Intera√ß√µes',
        'Taxa de intera√ß√£o',
        'Custo',
        'Convers√µes',
        'Custo/conv.'
    ]],
    use_container_width=True
)

# Rodap√©
st.markdown("---")
st.markdown("Dashboard desenvolvido para an√°lise de performance de campanhas Omoda") 